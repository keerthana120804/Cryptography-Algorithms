#include <iostream>
#include <string>
using namespace std;

// Function to compute modular inverse of 'a' modulo 'm'
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; // No modular inverse exists
}

// Function to encrypt the text using Affine Cipher
string encrypt(const string& text, int a, int b) {
    string result = "";
    for (char ch : text) {
        if (isalpha(ch)) {
            ch = toupper(ch);
            ch = (char)((a * (ch - 'A') + b) % 26 + 'A');
        }
        result += ch;
    }
    return result;
}

// Function to decrypt the cipher text using Affine Cipher
string decrypt(const string& cipher, int a, int b) {
    string result = "";
    int aInverse = modInverse(a, 26);
    for (char ch : cipher) {
        if (isalpha(ch)) {
            ch = toupper(ch);
            ch = (char)((aInverse * (ch - 'A' - b + 26) % 26) + 'A');
        }
        result += ch;
    }
    return result;
}

int main() {
    string text;
    int a, b;

    // Taking user input
    cout << "Enter plaintext (A-Z): ";
    getline(cin, text);
    cout << "Enter key 'a' (coprime to 26): ";
    cin >> a;
    cout << "Enter key 'b': ";
    cin >> b;

    string cipher = encrypt(text, a, b);
    cout << "Encrypted: " << cipher << endl;

    string decrypted = decrypt(cipher, a, b);
    cout << "Decrypted: " << decrypted << endl;

    return 0;
}
//Enter plaintext (A-Z): AFFINE CIPHER
Enter key 'a' (coprime to 26) : 7
Enter key 'b': 3
Encrypted: DMMHQF RHEAFS
Decrypted: AFFINE CIPHER
