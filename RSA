#include <iostream>
#include <cmath>
using namespace std;

// Function to perform modular exponentiation
long long modExp(long long base, long long exp, long long mod) {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    int p, q, e, d, plaintext;

    // Input primes, public key, private key, and plaintext
    cout << "Enter prime p: ";
    cin >> p;
    cout << "Enter prime q: ";
    cin >> q;
    cout << "Enter public key e: ";
    cin >> e;
    cout << "Enter private key d: ";
    cin >> d;
    cout << "Enter plaintext (as integer): ";
    cin >> plaintext;

    // Calculate n
    int n = p * q;

    // Encrypt plaintext: ciphertext = (plaintext^e) % n
    long long encrypted = modExp(plaintext, e, n);

    // Decrypt ciphertext: decrypted = (ciphertext^d) % n
    long long decrypted = modExp(encrypted, d, n);

    // Output results
    cout << "Encrypted: " << encrypted << endl;
    cout << "Decrypted: " << decrypted << endl;

    return 0;
}
